# read input from stdin (e.g. pipe)
input { 
    stdin {} 
}

filter {
   # filter the input by csv (i.e. comma-separated-value)
   csv {
       columns => [ 
"number",
"caller_id",
"priority",
"cmdb_ci",
"cmdb_ci.u_used_for",
"cmdb_ci.u_functional_org",
"cmdb_ci.u_its_managed",
"cmdb_ci.u_lmw",
"cmdb_ci.operational_status",
"cmdb_ci.purchase_date",
"cmdb_ci.u_sox",
"cmdb_ci.subcategory",
"cmdb_ci.u_criticality",
"cmdb_ci.category",
"cmdb_ci.correlation_id",
"cmdb_ci.support_group.name",
"cmdb_ci.install_status",
"cmdb_ci.u_status_reason",
"short_description",
"u_state",
"assigned_to",
"u_cause_code",
"opened_at",
"sys_updated_on",
"category",
"subcategory",
"u_status",
"assignment_group",
"u_crt_metric_created",
"u_crt_start_time",
"severity",
"u_severity",
"urgency",
"u_resolved_at",
"calendar_stc",
"location.u_countrycode",
"location",
"location.u_region",
"location.state",
"location.zip",
"assigned_to.u_employee_status",
"assigned_to.u_employee_type",
"assigned_to.vip",
"caller_id.u_employee_type",
"caller_id.u_employee_status",
"caller_id.company.u_code",
"caller_id.company.u_sector",
"contact_type",
"correlation_id",
"correlation_display"
       ]
   }

    mutate { replace => { "type" => "iris_incidents3" } }

date {
        # parse the "opened_at" to create a real date
        # Examples of times in this log file
        # 2015-10-23 01:09:09
        # 2015-10-30 10:05:21
        # 2015-10-30 09:50:41

        match => [ "opened_at",
                   "YYYY-MM-dd HH:mm:ss" ] }



}

# send the output to stdout, using the rubydebug codec
# rubydedug uses the Ruby Awesome Print library
output {

#    stdout { codec => rubydebug }



#   elasticsearch { cluster => jupiter host => localhost index => "logstash-%{+xxxx.MM}" }
   elasticsearch { cluster => jupiter host => localhost index => "logstash-%{+xxxx.MM}" }

}
